name: spring CD
on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          touch ./application-datasource.yml
          touch ./application-prod.yml

          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_DATASOURCE" > ./application-datasource.yml
          echo "$APPLICATION_PROD" > ./application-prod.yml
        env:
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_DATASOURCE: ${{ secrets.APPLICATION_DATASOURCE }}
          APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}
        shell: bash

      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: Build with Gradle (Test 제외)
        run: ./gradlew build -x test

      - name: Connect to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Make zip file
        run: |
          mkdir deploy
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./docker/Dockerfile ./deploy/
          cp ./scripts/deploy.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      - name: Upload to S3
        run: |
          aws s3 cp \
            --region ap-northeast-2 \
            ./spring-build.zip s3://sku-homepage

      - name: Code Deploy Deployment Request
        run: |
          aws deploy create-deployment --application-name sku-homepage \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name sku-deploy-group \
            --s3-location bucket=sku-homepage,bundleType=zip,key=spring-build.zip

      - name: Discord Notify
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: "deploy"
          description: "Build and deploy to GitHub Pages"
          url: "https://github.com/sarisia/actions-status-discord"
          username: GitHub Actions
